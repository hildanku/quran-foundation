services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    restart: unless-stopped
    command:
      # Enable Docker provider
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=app-network
      
      # Entry points
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      
      # Redirect HTTP to HTTPS
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      
      # Let's Encrypt configuration
      - --certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      
      # Enable dashboard (optional, for debugging)
      - --api.dashboard=true
      - --api.insecure=false
      
      # Logging
      - --log.level=INFO
      - --accesslog=true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    networks:
      - app-network
    labels:
      # Dashboard configuration (optional)
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN_FRONTEND}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: quran_foundation
      POSTGRES_DB: quran_foundation
      POSTGRES_PASSWORD: ${DB_PASSWORD:-quran_foundation}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./drizzle:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quran_foundation -d quran_foundation"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    restart: unless-stopped
    environment:
      - PORT=3000
      - NODE_ENV=production
      - DATABASE_URL=postgresql://quran_foundation:${DB_PASSWORD:-quran_foundation}@db:5432/quran_foundation
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_STORAGE_BUCKET=${SUPABASE_STORAGE_BUCKET}
      - QF_OAUTH_BASE_URL=${QF_OAUTH_BASE_URL}
      - QF_API_BASE_URL=${QF_API_BASE_URL}
      - QF_CLIENT_ID=${QF_CLIENT_ID}
      - QF_CLIENT_SECRET=${QF_CLIENT_SECRET}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - ACCESS_TOKEN_EXPIRES_IN=${ACCESS_TOKEN_EXPIRES_IN}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN}
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=${OTEL_EXPORTER_OTLP_TRACES_ENDPOINT}
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=${OTEL_EXPORTER_OTLP_METRICS_ENDPOINT}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - uploads:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/v1/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    labels:
      # Traefik configuration for backend
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN_BACKEND}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
      - "traefik.docker.network=app-network"

  # Frontend with Nginx
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        VITE_BACKEND_URL: "https://${DOMAIN_BACKEND}"
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    labels:
      # Traefik configuration for frontend
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN_FRONTEND}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.docker.network=app-network"

volumes:
  pgdata:
  uploads:
  letsencrypt:

networks:
  app-network:
    driver: bridge